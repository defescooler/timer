import { useState, useEffect } from 'react'
import './App.css'

const motivationalQuotes = [
  "–ü–∞—Ä—Ö–∞–π –∫–∞–∫ –±–∞–±–æ—á–∫–∞, –∂–∞–ª—å –∫–∞–∫ –ø—á–µ–ª–∞",
  "–ù–µ —Å—É–¥–∏ –º–µ–Ω—è –ø–æ —Ä—É–±–∞—à–∫–µ, —Å—É–¥–∏ –ø–æ —Ç–æ–º—É, —á—Ç–æ –ø—Ä—è—á–µ—Ç—Å—è –≤ –º–æ–∏—Ö –∫–∞—Ä–º–∞–Ω–∞—Ö.",
  "–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª—ã—Ö —à–∞–≥–æ–≤.",
  "–ù–µ –±–æ–π—Ç–µ—Å—å –ø—Ä–æ–≤–∞–ª–æ–≤, –æ–Ω–∏ ‚Äî —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É.",
  "–°–¥–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –Ω–µ —Ö–æ—Ç—è—Ç, –∏ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—à—å –∂–∏—Ç—å —Ç–∞–∫, –∫–∞–∫ –¥—Ä—É–≥–∏–µ –Ω–µ –º–æ–≥—É—Ç.",
  "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –≤–∞—à–µ –æ—Ä—É–∂–∏–µ, –Ω–µ –¥–∞–≤–∞–π—Ç–µ –µ–º—É —Å–ª–æ–º–∞—Ç—å—Å—è.",
  "–í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à—É –≤—ã—Å–æ—Ç—É.",
  "–ë–µ–∂–∞—Ç—å –∏–ª–∏ —Å—Ç–æ—è—Ç—å? –Ø –≤—Å–µ–≥–¥–∞ —Å—Ç–æ—è–ª –≤ —Ç–µ–Ω–∏, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–ª—Å—è.",
  "–í–∞—à–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ ‚Äî —ç—Ç–æ –≤–∞—à–∞ —Å–∏–ª–∞.",
  "–ù–µ –±–æ–π—Ç–µ—Å—å –Ω–µ—É–¥–∞—á, –±–æ–π—Ç–µ—Å—å –Ω–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.",
  "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º –∏ —Ç—Ä—É–¥–Ω—ã–º.",
  "–†–æ—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–º—Ñ–æ—Ä—Ç."
]

function App() {
  const [name, setName] = useState('') // —Å—Ç–∞–≤–∏–º '' –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—Å—Ç
  const [timeLeft, setTimeLeft] = useState(0) // 0 - —Ö—Ä–∞–Ω–∏–º —á–∏—Å–ª–∞ 
  const [timerActive, setTimerActive] = useState(false)// false - —Ö—Ä–∞–Ω–∏–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏–¥–µ—Ç –ª–∏ –æ—Ç—Å—á–µ—Ç?
  const [hasStarted, setHasStarted] = useState(false) //–Ω–∞—á–∞–ª–∏ –ª–∏ –æ—Ç—Å—á–µ—Ç?
  const [currentQuote, setCurrentQuote] = useState(motivationalQuotes[Math.floor(Math.random() * motivationalQuotes.length)])

  const startTimer = () => { // –∫–æ–≥–¥–∞ –º—ã –≤—ã–∑–æ–≤–µ–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –º—ã –ø–æ–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–∏–∂–µ...
    if (!name.trim()) return;  // –µ—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
    setTimeLeft(10);           // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 10 —Å–µ–∫—É–Ω–¥ timeLeft
    setTimerActive(true);      // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ (timerActive) –Ω–∞ ‚Äú–∑–∞–ø—É—â–µ–Ω‚Äù
    setHasStarted(true) 
  }
  
  const resetAll = () => {
    setTimerActive(false)
    setTimeLeft(0)
    setName('')
    setHasStarted(false)
  }

  useEffect(() => { // —ç—Ç–æ—Ç —é–∑—Ñ—Ñ–µ–∫—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if (!timerActive) {
      return
    }

    const intervalId = setInterval(() => { // setInterval - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è React –≤ —Ñ–æ—Ä–º–∞—Ç–µ const id = setInterval(callbackFunction, delayInMilliseconds);
      setTimeLeft(prev => prev - 1)
    }, 1000)


    return () => {
      clearInterval(intervalId) //—Ç–æ–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —É–±–∏—Ä–∞–µ–º –æ—Ç—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ timrActive
    }
  }, [timerActive]) 

 
  useEffect(() => { // –∞ —ç—Ç–æ—Ç —é–∑—ç—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∏—Ç —á—Ç–æ–±—ã –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ timeLeft –¥–æ–π–¥—ë—Ç –¥–æ 0
    if (timerActive && timeLeft === 0) {
      setTimerActive(false) //–æ—Å—Ç–∞–Ω—Ä–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    }
  }, [timeLeft, timerActive])

  useEffect(() => { //—é–∑—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ—Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 6 —Å–µ–∫—É–Ω–¥ (6000–º—Å)
    const quoteInterval = setInterval(() => {
      const randomIndex = Math.floor(Math.random() * motivationalQuotes.length)
      setCurrentQuote(motivationalQuotes[randomIndex])
    }, 6000)

    return () => {
      clearInterval(quoteInterval)
    }
  }, [])

  return (
    <div className="app-container">
      <h1 className="title">–¢–∞–π–º–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞</h1>

      <div className="input-group">
        <label htmlFor="nameInput">–í–≤–µ–¥–∏—Ç–µ –∏–º—è:</label>
        <input
          id="nameInput"
          type="text"
          value={name}
          onChange={e => setName(e.target.value)}
          placeholder="–®–æ–∫–∞–Ω...?"
          disabled={timerActive}
        />
      </div>

      <div className="buttons">
        <button
          onClick={startTimer}
          disabled={timerActive || !name.trim()}
          className={timerActive ? 'btn-disabled' : 'btn-start'}
        >
          –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞
        </button>
        <button onClick={resetAll} className="btn-reset">
          –°–±—Ä–æ—Å
        </button>
      </div>

      <div className="timer-display">
        {timerActive && timeLeft > 0 && (
          <p className="countdown">
            {name}, –æ—Å—Ç–∞–ª–æ—Å—å {timeLeft} —Å–µ–∫—É–Ω–¥!
          </p>
        )}

{!timerActive && timeLeft === 0 && name.trim() && hasStarted && (
          <>
            <p className="finished">–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, {name} üí™</p>
           
          </>
        )}
      </div>

      <div className="quote-display">
        <p className="quote">"{currentQuote}"</p>
      </div>
    </div>
  )
}

export default App